AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create IAM roles

Parameters:
  EnvType:
    Type: String
    Default: "dev"
    Description: The environment type (e.g., prod, dev)
  DomainName:
    Type: String
    Description: The name of the domain

Resources:
#Redshift Role
  RedshiftServerlessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-redshift-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: redshift-serverless.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRedshiftAllCommandsFullAccess
      Policies:
        - PolicyName: RedshiftServerlessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                Resource: '*'

  ### IAM Role for DMS ###
  DMSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-dms-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: dms.amazonaws.com
            Action: sts:AssumeRole     
      Policies:
        - PolicyName: DMSAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - dms:CreateReplicationSubnetGroup
                  - dms:CreateReplicationTask
                  - dms:DescribeReplicationInstances
                  - dms:DescribeEndpoints
                  - dms:DescribeReplicationTasks
                  - dms:StartReplicationTask
                  - dms:StopReplicationTask
                  - dms:ModifyReplicationTask
                  - dms:DeleteReplicationTask
                  - dms:DescribeReplicationSubnetGroups
                  - dms:DescribeEventSubscriptions
                Resource: 
                  - "*"

### IAM Role for SQS ###     
  MyQueueIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-sqs-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"  # Replace this with the service or entity that will assume the role
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: SQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ListQueues
                Resource: 
                   - "*"
### IAM Role for Glue Job ### 
  GlueJobRole:                
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
         Fn::Join:
          - "-"
          - [ "sandbox", !Ref DomainName, !Ref EnvType, "gluejob-role"]       
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource: '*'
        - PolicyName: CloudwatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*' 

# CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-codebuildservice-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
         - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
      Policies:
        - PolicyName: CodeBuildServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:*
  SSMParamsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-SSMParamsRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
                
  # IAM Role for SNS to allow Lambda to use the topic
  SNSLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${EnvType}-${DomainName}-SNSLambdaRole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - sns:Publish
                  - sns:CreateTopic
                  - sns:Subscribe
                  - sns:SetTopicAttributes
                  - sns:PutTopicPolicy
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: '*'

#Redshift Secret Acces Role
  RedshiftSecretAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-RedshiftSecretAccessRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'redshift-serverless.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'RedshiftSecretAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'secretsmanager:GetSecretValue'
                Resource: '*'

# Lambda role for creating folders
  S3LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-S3LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: '*' 

 ### IAM Role for MWAA Execution ###
  AirflowExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-AirflowExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - airflow.amazonaws.com
                - airflow-env.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: MWAAExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - airflow:PublishMetrics
                  - airflow:CreateWebLoginToken
                Resource:
                  - !Sub arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/*
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:GetLogRecord
                  - logs:GetLogGroupFields
                  - logs:GetQueryResults
                  - logs:DescribeLogGroups
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource:
                  - '*'
   # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${EnvType}-${DomainName}-ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ecsTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - ecs:StartTask
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

Outputs: 
  DMSIAMRole:
    Description: 'Name of the created DMS IAM role'
    Value: !Ref DMSIAMRole
    Export:
      Name: DMSIAMRole
  RedshiftIamRoleName:
    Description: 'Name of the created Redshift role'
    Value: !Ref RedshiftServerlessRole
  RedshiftIamRoleArn:
    Description: 'ARN of the Redshift Serverless IAM Role'
    Value: !GetAtt RedshiftServerlessRole.Arn
  MyQueueIAMRole:
    Description: 'Name of the MyQueue IAM Role'
    Value: !Ref MyQueueIAMRole
  GlueJobRoleArn:
    Description: 'Name of the Glue Job Role'
    Value: !GetAtt GlueJobRole.Arn 
  CodeBuildServiceRoleArn:
    Description: 'ARN of the CodeBuild Service Role'
    Value: !GetAtt CodeBuildServiceRole.Arn
  SNSLambdaRoleArn:
    Description: 'ARN of the SNS Lambda Role'
    Value: !GetAtt SNSLambdaRole.Arn
  SSMParamsRoleArn:
    Description: 'ARN of the SSMParams Role'
    Value: !GetAtt SSMParamsRole.Arn  
  RedshiftSecretAccessRoleArn:
    Description: 'ARN of the Redshift Secret Access Role'
    Value: !GetAtt RedshiftSecretAccessRole.Arn
  S3LambdaExecutionRoleArn:
    Description: 'Arn of the S3 LambdaExecution Access Role'
    Value: !GetAtt S3LambdaExecutionRole.Arn 
  AirflowExecutionRoleArn:
    Description: 'Arn of the Airflow Execution Access Role'
    Value: !GetAtt AirflowExecutionRole.Arn
  ECSTaskExecutionRoleArn:
    Description: 'Arn of the ECSTaskExecution Access Role'
    Value: !GetAtt ECSTaskExecutionRole.Arn     
    


                