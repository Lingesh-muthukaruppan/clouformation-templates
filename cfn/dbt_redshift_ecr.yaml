AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to build and push dbt-redshift Docker image to ECR'

Parameters:
  EnvType:
    Type: String
    Default: "dev"
    Description: The environment type (e.g., prod, dev)

  DomainName:
    Type: String
    Description: The name of the domain  

  RepositoryName:
    Type: String
    Description: Name of the ECR repository

  RedshiftHost:
    Type: String
    Description: Redshift cluster endpoint
     
  AdminUsername:
    Type: String
    Description: Redshift username
    
  AdminUserPassword:
    Type: String
    Description: Redshift password
    NoEcho: true

  CodeBuildServiceRoleArn:
    Type: String
    Description: 'ARN of the IAM role for the CodeBuildServiceRole'  

Resources:
  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE

  # CodeBuild Project
  DockerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: dbt-redshift-stack-dbt-docker-build
      ServiceRole: !Ref CodeBuildServiceRoleArn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:6.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref RepositoryName
          - Name: IMAGE_TAG
            Value: latest
          - Name: REDSHIFT_HOST
            Value: !Ref RedshiftHost
          - Name: REDSHIFT_DB
            Value: 
              Fn::Join:
                - "_"
                - [!Ref EnvType, !Ref DomainName]
          - Name: REDSHIFT_USER
            Value: !Ref AdminUsername
          - Name: REDSHIFT_PASSWORD
            Value: !Ref AdminUserPassword
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo "=== Environment Variables ==="
                - echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION"
                - echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"
                - echo "IMAGE_REPO_NAME=$IMAGE_REPO_NAME"
                - echo "IMAGE_TAG=$IMAGE_TAG"
                
                - echo "=== System Resources ==="
                - df -h
                - docker system prune -f
                
                - echo "=== ECR Login ==="
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                
                # Create profiles.yml
                - |
                  cat << 'EOF' > profiles.yml
                  default:
                    outputs:
                      dev:
                        type: redshift
                        host: $REDSHIFT_HOST
                        user: $REDSHIFT_USER
                        password: $REDSHIFT_PASSWORD
                        port: 5439
                        dbname: $REDSHIFT_DB
                        schema: public
                        threads: 4
                        keepalives_idle: 0
                        connect_timeout: 10
                    target: dev
                  EOF
                
                # Create Dockerfile
                - |
                  cat << 'EOF' > Dockerfile
                  FROM public.ecr.aws/docker/library/python:3.9-slim

                  RUN apt-get update && \
                      apt-get install -y --no-install-recommends \
                      git \
                      ssh-client \
                      software-properties-common \
                      make \
                      build-essential \
                      ca-certificates \
                      libpq-dev && \
                      apt-get clean && \
                      rm -rf /var/lib/apt/lists/*

                  RUN python -m pip install --upgrade pip && \
                      python -m pip install --no-cache-dir \
                      dbt-core \
                      dbt-redshift \
                      elementary-data

                  RUN mkdir -p /usr/app/dbt /root/.dbt
                  WORKDIR /usr/app/dbt

                  COPY profiles.yml /root/.dbt/

                  ENV DBT_PROFILES_DIR=/root/.dbt

                  RUN dbt --version && edr --help
                  EOF
                
                - echo "=== Workspace Contents ==="
                - ls -la
                
            build:
              commands:
                - echo "=== Building Docker Image ==="
                - docker build --no-cache -t $IMAGE_REPO_NAME:$IMAGE_TAG . || exit 1
                - echo "=== Docker Images ==="
                - docker images
                - echo "=== Tagging Image ==="
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG || exit 1
                
            post_build:
              commands:
                - echo "=== Pushing Image ==="
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - echo "=== Build Complete ==="

Outputs:
  RepositoryURI:
    Description: ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}
  
  BuildProjectName:
    Description: Name of the CodeBuild Project
    Value: !Ref DockerBuildProject

